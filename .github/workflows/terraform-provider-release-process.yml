name: "Terraform Provider Release Process"

on:
  workflow_dispatch:
    inputs:
      provider_version:
        description: 'Terraform Provider Version (without v prefix)'
        required: true
        type: string

jobs:
  # First job: Check if tag already exists
  check-tag:
    name: "Check Tag Existence"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Check if tag exists
        run: |
          TAG_NAME="v${{ github.event.inputs.provider_version }}"
          echo "Checking if tag $TAG_NAME already exists..."
          
          # Check if the tag already exists in the remote repository
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "::error::Tag $TAG_NAME already exists in the repository. Please use a different version number."
            exit 1
          fi
          
          echo "Tag $TAG_NAME does not exist, proceeding with release process."

  # Second job: Generate SBOM
  sbom:
    name: "Generate SBOM for Terraform Provider"
    needs: check-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true
          
      - name: Generate SBOM
        env:
          SYFT_PACKAGE_SEARCH_UNINDEXED_ARCHIVES: "true"
          SYFT_PACKAGE_SEARCH_INDEXED_ARCHIVES: "true"
          SYFT_SCOPE: "all-layers"
          SYFT_PACKAGE_CATALOGER_ENABLED: "true"
          SYFT_PACKAGE_CATALOGER_RUBY_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_PYTHON_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_NODEJS_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_DARTLANG_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_DOTNET_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_JAVA_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_LINUX_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_PHP_ENABLED: "false"
          SYFT_PACKAGE_CATALOGER_RUST_ENABLED: "false"
        run: |
          # Install Syft (Current Manifest CLI v0.18.3 release Syft v1.18.1)
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.18.1          
          echo "Syft version: $(syft version)"
          
          # Install Manifest CLI
          curl -sSfL https://raw.githubusercontent.com/manifest-cyber/cli/main/install.sh | sh -s -- -b /usr/local/bin v0.18.3          
          
          # Create Syft configuration focusing only on Go
          cat > syft-config.yaml << 'EOF'
          package:
            search:
              scope: all-layers
              exclude:
                - ".git/**"
                - ".github/**"
                - "**/testdata/**"
            cataloger:
              enabled: true
              ruby:
                enabled: false
              python:
                enabled: false
              nodejs:
                enabled: false
              dartlang:
                enabled: false
              dotnet:
                enabled: false
              java:
                enabled: false
              linux:
                enabled: false
              php:
                enabled: false
              rust:
                enabled: false
              golang:
                enabled: true
                search-unindexed-archives: true
                search-indexed-archives: true
          EOF
          
          # Use the version from workflow input
          PROVIDER_VERSION="${{ github.event.inputs.provider_version }}"
          
          echo "Provider version: ${PROVIDER_VERSION}"
          
          # Debug: show what will be scanned
          echo "Files to be scanned:"
          find . -name "*.go" -o -name "go.mod" -o -name "go.sum"
          
          # Generate and publish SBOM using Manifest
          manifest sbom . \
            --generator=syft \
            --name=terraform-provider-secretsmanager \
            --version=${PROVIDER_VERSION} \
            --output=spdx-json \
            --file=sbom.json \
            --api-key=${{ secrets.MANIFEST_TOKEN || '' }} \
            --publish=true \
            --asset-label=terraform-provider,sbom-generated,golang \
            --generator-config=syft-config.yaml
          
      - name: Archive SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-terraform-provider
          path: |
            ./*.json
            ./*.xml
          retention-days: 10

  # Third job: Create Tag and Release (with approval)
  tag-and-release:
    name: "Create Tag and Release"
    needs: sbom
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Create Tag
        id: set-tag
        run: |
          TAG_NAME="v${{ github.event.inputs.provider_version }}"
          echo "Creating new tag: $TAG_NAME"
          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Retrieve secrets from Keeper
        id: ksecrets
        uses: Keeper-Security/ksm-action@master
        with:
          keeper-secret-config: ${{ secrets.KSM_PUBLISHER_CONFIG || '' }}
          secrets: |
            sZ5fnzalziVolGvaVo8oKw/custom_field/PGP_PRIVATE_KEY_BLOCK_-_ASCII-armor_format > GPG_PRIVATE_KEY
            sZ5fnzalziVolGvaVo8oKw/custom_field/Pass_Phrase > GPG_PASSPHRASE

      - name: Checkout with tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.set-tag.outputs.tag_name }}

      - name: Fetch git history
        run: |
          # Check if it's a shallow repository
          if git rev-parse --is-shallow-repository | grep -q "true"; then
            git fetch --prune --unshallow
          else
            git fetch --prune
          fi

      - name: Check GoReleaser configuration
        run: |
          if [ -f .goreleaser.yaml ] || [ -f .goreleaser.yml ]; then
            echo "Checking for deprecated 'format' in archives section..."
            if grep -q "format:" .goreleaser.y*ml; then
              echo "WARNING: Your .goreleaser file uses the deprecated 'format' property. Consider updating to 'formats' array."
              echo "See https://goreleaser.com/deprecations/#archivesformat for more information."
            fi
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ steps.ksecrets.outputs.GPG_PRIVATE_KEY }}
          passphrase: ${{ steps.ksecrets.outputs.GPG_PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
